# This workflow uses actions that are not certified by GitHub.  They are
# provided by a third-party and are governed by separate terms of service,
# privacy policy, and support documentation.
#
# This workflow will install a prebuilt Ruby version, install dependencies, and
# run tests and linters.
name: 'Ruby on Rails CI'
on: [push]
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: test
      JAVA_HOME: /usr/lib/jvm/temurin-8-jdk-amd64
      HEADLESS: true
      RETRY: true
      CI: true
    steps:
      - name: Update packages
        run: sudo apt-get update
      - name: Install pdflatex
        run: sudo apt-get install texlive-latex-base texlive-xetex texlive-luatex texlive-fonts-extra
      #- name: List Javas
      #  run: sudo update-java-alternatives --list
      - name: Remove Javas
        run: sudo apt remove temurin-11-jdk temurin-17-jdk temurin-21-jdk
      #- name: List Javas again
      #  run: sudo update-java-alternatives --list
      - name: Use Java 8
        run: sudo update-java-alternatives --set temurin-8-jdk-amd64
      #- name: Set env variable
      #  run: export JAVA_HOME=/usr/lib/jvm/temurin-8-jdk-amd64
      - name: Confirm Java version
        run: java -version
      - name: Checkout code
        uses: actions/checkout@v4
      # Add or replace dependency steps here
      - name: Start MySQL
        run: sudo /etc/init.d/mysql start
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Install foreman
        run: gem install foreman
      - name: Install node modules
        run: yarn
      - name: Compile webpack assets for test environment
        run: RAILS_ENV=test NODE_ENV=test bin/shakapacker
      - name: Copy datacite.yml file
        run: cp config/datacite.example.yml config/datacite.yml
      - name: Copy database.yml file
        run: cp config/database.example.yml config/database.yml
      - name: Create database
        run: mysql -u root -proot -e "create database ohd_archive_test";
      # Add or replace database setup steps here
      - name: Set up database schema
        run: bin/rails db:schema:load
      # Other setup stuff
      - name: Add localhost to /etc/hosts
        run: sudo echo "127.0.0.1 localhost" | sudo tee -a /etc/hosts
      - name: Add test domain to /etc/hosts
        run: sudo echo "127.0.0.1 test.portal.oral-history.localhost" | sudo tee -a /etc/hosts
      - name: Start search engine
        run: bin/start_search &
      - name: Wait for Solr (localhost) to be ready
        run: |
          echo "Waiting for Solr at http://localhost:8983/solr/ ..."
          for i in $(seq 1 120); do
          if curl -sS "http://localhost:8983/solr/" >/dev/null; then
              echo "Solr is up"
              break
          fi
          echo "Solr not ready yet, retrying... ($i)"
          sleep 1
          done
      - name: Verify webpack assets exist
        run: |
          echo "Checking for compiled webpack assets..."
          ls -lh public/packs-test/
          test -f public/packs-test/manifest.json && echo "manifest.json exists" || echo "ERROR: manifest.json missing!"
      - name: Run tests
        run: bin/test
      - name: Upload Capybara screenshots
        if: always() # always run, even if tests failed
        uses: actions/upload-artifact@v4
        with:
          name: capybara-screenshots
          path: tmp/screenshots
          if-no-files-found: ignore

  # TODO: Enable linting again when issues are fixed
  # lint:
  #     runs-on: ubuntu-latest
  #     steps:
  #         - name: Checkout code
  #           uses: actions/checkout@v4
  #         - name: Install Ruby and gems
  #           uses: ruby/setup-ruby@v1
  #           with:
  #               bundler-cache: true
  #         # Add or replace any other lints here
  #         - name: Security audit dependencies
  #           run: bin/bundler-audit --update
  #         - name: Security audit application code
  #           run: bin/brakeman -q -w2
  #         - name: Lint Ruby files
  #           run: bin/rubocop --parallel
